// Generated by CoffeeScript 1.7.1
var surfaces_txt_unite;

surfaces_txt_unite = {};

surfaces_txt_unite.unite = function(surfaces_txt) {
  var delete_index, index, line, lines, other_lines, result_txt, scope, scopes, surface_lines, surface_lines_in_scopes, surface_lines_union, txt_lines, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _len5, _m, _n;
  txt_lines = surfaces_txt.split(/\r?\n/);
  scope = null;
  surface_lines = {};
  surface_lines_union = {};
  other_lines = [];
  for (index = _i = 0, _len = txt_lines.length; _i < _len; index = ++_i) {
    line = txt_lines[index];
    if (line.match(/^surface/)) {
      scope = line.replace(/{/, '');
      surface_lines[scope] = [];
    } else if ((scope != null) && line.match(/^}/)) {
      scope = null;
    } else if (scope != null) {
      if (line.match(/{/)) {
        continue;
      }
      surface_lines[scope].push(line);
      if (surface_lines_union[line] == null) {
        surface_lines_union[line] = [];
      }
      surface_lines_union[line].push(scope);
    } else {
      other_lines.push(line);
    }
  }
  surface_lines_in_scopes = {};
  for (line in surface_lines_union) {
    scopes = surface_lines_union[line];
    if (scopes.length > 1) {
      scope = scopes.sort().join(', ');
      if (surface_lines_in_scopes[scope] == null) {
        surface_lines_in_scopes[scope] = [];
      }
      surface_lines_in_scopes[scope].push(line);
    } else {
      delete surface_lines_union[line];
    }
  }
  for (scope in surface_lines) {
    lines = surface_lines[scope];
    delete_index = [];
    for (index = _j = 0, _len1 = lines.length; _j < _len1; index = ++_j) {
      line = lines[index];
      if (surface_lines_union[line]) {
        delete_index.push(index);
      }
    }
    delete_index.sort(function(a, b) {
      return b - a;
    });
    for (_k = 0, _len2 = delete_index.length; _k < _len2; _k++) {
      index = delete_index[_k];
      lines.splice(index, 1);
    }
  }
  result_txt = '';
  for (_l = 0, _len3 = other_lines.length; _l < _len3; _l++) {
    line = other_lines[_l];
    result_txt += line + '\r\n';
  }
  for (scope in surface_lines) {
    lines = surface_lines[scope];
    if (lines.length) {
      result_txt += scope + '\r\n';
      result_txt += '{' + '\r\n';
      for (_m = 0, _len4 = lines.length; _m < _len4; _m++) {
        line = lines[_m];
        result_txt += line + '\r\n';
      }
      result_txt += '}' + '\r\n';
    }
  }
  for (scope in surface_lines_in_scopes) {
    lines = surface_lines_in_scopes[scope];
    result_txt += scope + '\r\n';
    result_txt += '{' + '\r\n';
    for (_n = 0, _len5 = lines.length; _n < _len5; _n++) {
      line = lines[_n];
      result_txt += line + '\r\n';
    }
    result_txt += '}' + '\r\n';
  }
  return result_txt;
};

if (typeof exports !== "undefined" && exports !== null) {
  exports.unite = surfaces_txt_unite.unite;
}
