// Generated by CoffeeScript 1.7.1
var surfaces_txt_unite;

surfaces_txt_unite = {};

surfaces_txt_unite.unite = function(surfaces_txt) {
  var animation_id, animations, contents, continuous_empty_line_count, delete_index, index, key, line, lines, multiple_scopes, other_lines, result, result_txt, scope, scope_txt, scopes, single_scopes, surface_lines, surface_lines_animation, surface_lines_animation_in_scopes, surface_lines_in_scopes, surface_lines_union, surface_lines_union_animation, txt_lines, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _len5, _len6, _len7, _m, _n, _o, _p, _ref, _ref1, _ref2, _ref3, _ref4;
  txt_lines = surfaces_txt.split(/\r?\n/);
  scope = null;
  surface_lines = {};
  surface_lines_union = {};
  surface_lines_animation = {};
  other_lines = [];
  for (index = _i = 0, _len = txt_lines.length; _i < _len; index = ++_i) {
    line = txt_lines[index];
    if (line.match(/^surface/)) {
      scope = line.replace(/\.append/, '').replace(/{/, '');
      if (surface_lines[scope] == null) {
        surface_lines[scope] = [];
      }
    } else if ((scope != null) && line.match(/^}/)) {
      scope = null;
    } else if (scope != null) {
      if (line.match(/{/)) {
        continue;
      }
      result = null;
      if (result = line.match(/^(?:animation)?(\d+)\.?(interval|pattern|option|collision)/)) {
        animation_id = result[1];
        if (surface_lines_animation[scope] == null) {
          surface_lines_animation[scope] = {};
        }
        if (surface_lines_animation[scope][animation_id] == null) {
          surface_lines_animation[scope][animation_id] = {
            lines: []
          };
        }
        surface_lines_animation[scope][animation_id].lines.push(line);
      } else {
        surface_lines[scope].push(line);
        if (surface_lines_union[line] == null) {
          surface_lines_union[line] = [];
        }
        surface_lines_union[line].push(scope);
      }
    } else {
      other_lines.push(line);
    }
  }
  surface_lines_in_scopes = {};
  for (line in surface_lines_union) {
    scopes = surface_lines_union[line];
    if (line.length) {
      if (scopes.length > 1) {
        scope = scopes.sort().join(',');
        if (surface_lines_in_scopes[scope] == null) {
          surface_lines_in_scopes[scope] = [];
        }
        surface_lines_in_scopes[scope].push(line);
      } else {
        delete surface_lines_union[line];
      }
    }
  }
  for (scope in surface_lines) {
    lines = surface_lines[scope];
    delete_index = [];
    for (index = _j = 0, _len1 = lines.length; _j < _len1; index = ++_j) {
      line = lines[index];
      if (surface_lines_union[line]) {
        delete_index.push(index);
      }
    }
    delete_index.sort(function(a, b) {
      return b - a;
    });
    for (_k = 0, _len2 = delete_index.length; _k < _len2; _k++) {
      index = delete_index[_k];
      lines.splice(index, 1);
    }
  }
  surface_lines_union_animation = {};
  for (scope in surface_lines_animation) {
    animations = surface_lines_animation[scope];
    for (animation_id in animations) {
      contents = animations[animation_id];
      key = contents.lines.slice().sort().join('\r\n');
      contents.key = key;
      if (surface_lines_union_animation[key] == null) {
        surface_lines_union_animation[key] = {
          scopes: []
        };
      }
      surface_lines_union_animation[key].lines = contents.lines;
      surface_lines_union_animation[key].scopes.push(scope);
    }
  }
  surface_lines_animation_in_scopes = {};
  for (key in surface_lines_union_animation) {
    contents = surface_lines_union_animation[key];
    if (contents.scopes.length > 1) {
      scope = contents.scopes.sort().join(',');
      if (surface_lines_animation_in_scopes[scope] == null) {
        surface_lines_animation_in_scopes[scope] = [];
      }
      surface_lines_animation_in_scopes[scope] = surface_lines_animation_in_scopes[scope].concat(contents.lines);
    } else {
      delete surface_lines_union_animation[key];
    }
  }
  for (scope in surface_lines_animation) {
    animations = surface_lines_animation[scope];
    delete_index = [];
    for (animation_id in animations) {
      contents = animations[animation_id];
      if (surface_lines_union_animation[contents.key] != null) {
        delete animations[animation_id];
      }
    }
  }
  result_txt = '';
  continuous_empty_line_count = 0;
  for (_l = 0, _len3 = other_lines.length; _l < _len3; _l++) {
    line = other_lines[_l];
    if (line.length) {
      continuous_empty_line_count = 0;
      result_txt += line + '\r\n';
    } else {
      continuous_empty_line_count++;
      if (continuous_empty_line_count <= 5) {
        result_txt += line + '\r\n';
      }
    }
  }
  single_scopes = {};
  for (scope in surface_lines) {
    single_scopes[scope] = true;
  }
  for (scope in surface_lines_animation) {
    single_scopes[scope] = true;
  }
  for (scope in single_scopes) {
    scope_txt = '';
    if (surface_lines[scope] != null) {
      _ref = surface_lines[scope];
      for (_m = 0, _len4 = _ref.length; _m < _len4; _m++) {
        line = _ref[_m];
        scope_txt += line + '\r\n';
      }
    }
    if (surface_lines_animation[scope] != null) {
      _ref1 = surface_lines_animation[scope];
      for (animation_id in _ref1) {
        contents = _ref1[animation_id];
        _ref2 = contents.lines;
        for (_n = 0, _len5 = _ref2.length; _n < _len5; _n++) {
          line = _ref2[_n];
          scope_txt += line + '\r\n';
        }
      }
    }
    if (scope_txt.length) {
      result_txt += scope + '\r\n';
      result_txt += '{' + '\r\n';
      result_txt += scope_txt;
      result_txt += '}' + '\r\n';
    }
  }
  multiple_scopes = {};
  for (scope in surface_lines_in_scopes) {
    multiple_scopes[scope] = true;
  }
  for (scope in surface_lines_animation_in_scopes) {
    multiple_scopes[scope] = true;
  }
  for (scope in multiple_scopes) {
    scope_txt = '';
    if (surface_lines_in_scopes[scope] != null) {
      _ref3 = surface_lines_in_scopes[scope];
      for (_o = 0, _len6 = _ref3.length; _o < _len6; _o++) {
        line = _ref3[_o];
        scope_txt += line + '\r\n';
      }
    }
    if (surface_lines_animation_in_scopes[scope] != null) {
      _ref4 = surface_lines_animation_in_scopes[scope];
      for (_p = 0, _len7 = _ref4.length; _p < _len7; _p++) {
        line = _ref4[_p];
        scope_txt += line + '\r\n';
      }
    }
    if (scope_txt.length) {
      result_txt += scope + '\r\n';
      result_txt += '{' + '\r\n';
      result_txt += scope_txt;
      result_txt += '}' + '\r\n';
    }
  }
  return result_txt;
};

if (typeof exports !== "undefined" && exports !== null) {
  exports.unite = surfaces_txt_unite.unite;
}
